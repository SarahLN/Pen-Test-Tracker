from sqlalchemy import create_engine
import pandas as pd


class PenTestDBConn(object):
    __mysql_engine = None;

    def __init__(self):
        self.__mysql_engine = create_engine('mysql://root:INSERTPASSWORDHERE@localhost:3306/pentestdb', echo=False)

    def insert_host_port_details_record(self, in_host_id, in_port_id, in_service_id, in_status):
        """
        Adds a record to the PenTestDB to relate a host with a port, service, and status. Returns the id of the
        row added.

        :param in_host_id: int, the host_id of the given host
        :param in_port_id: int, the port_id of the given port
        :param in_service_id: int, the service_id of the given service
        :param in_status: string, the status of that host/port/service combo
        :return: int, the id of the row added.
        """
        query = 'CALL pentestdb.insert_host_port_details_record({0}, {1}, {2}, \'{3}\'); commit;'.format(
            in_host_id,
            in_port_id,
            in_service_id,
            in_status
        )
        f = pd.read_sql_query(query, self.__mysql_engine)
        return f.id[0]

    def insert_host_record(self, in_ip_addr, in_mac, in_os):
        """
        Add a host record to the database

        :param in_ip_addr: string, the ip address to add
        :param in_mac: string, the mac address to add
        :param in_os: string, the OS of the host
        :return: int, the host_id of the newly added host
        """
        query = 'CALL pentestdb.insert_host_record(\'{0}\', \'{1}\', \'{2}\');'.format(
            in_ip_addr,
            in_mac,
            in_os
        )
        f = pd.read_sql_query(query, self.__mysql_engine)
        return f.host_id[0]

    def select_host_record_by_any_field(self, in_search_term):
        """
        Searches all fields in the host table and returns all results that match the search string in any field.
        Includes partial matches.

        :param in_search_term: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_any_field(\'{0}\');'.format(in_search_term)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def select_host_record_by_host_id(self, in_host_id):
        """
        Returns the host record with the matching host_id.

        :param in_host_id: int, the host_id for the host
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_host_id({0});'.format(in_host_id)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def select_host_record_by_hostname(self, in_hostname):
        """
        Searches the hostname field in the host table and returns all results that match the search string.
        Includes partial matches.

        :param in_hostname: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_hostname(\'{0}\');'.format(in_hostname)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def select_host_record_by_ip(self, in_ip_addr):
        """
        Searches the ip_addr field in the host table and returns all results that match the search string.
        Includes partial matches.

        :param in_ip_addr: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_ip(\'{0}\');'.format(in_ip_addr)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def select_host_record_by_mac(self, in_mac):
        """
        Searches the mac field in the host table and returns all results that match the search string.
        Includes partial matches.

        :param in_mac: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_mac(\'{0}\');'.format(in_mac)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def select_host_record_by_os(self, in_os):
        """
        Searches the os field in the host table and returns all results that match the search string.
        Includes partial matches.

        :param in_os: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_host_record_by_os(\'{0}\');'.format(in_os)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='host_id')
        return f

    def update_host_record(self, in_host_id, in_ip_addr, in_mac, in_os):
        """
        Updates the host record corresponding to in_host_id.  Any fields that do not need to be updated can be mull.

        :param in_host_id: int, the host_id of the host
        :param in_ip_addr: string, the ip address to update to
        :param in_mac: string, the mac address to update to
        :param in_os: string, the os to update to
        :return: int, the host_id that was updated
        """
        query = 'CALL pentestdb.update_host_record({0}, \'{1}\', \'{2}\', \'{3}\');'.format(
            in_host_id,
            in_ip_addr,
            in_mac,
            in_os
        )
        f = pd.read_sql_query(query, self.__mysql_engine)
        return f.host_id[0]

    def insert_port_record(self, in_port_num, in_protocol):
        """
        Add a port record to the database

        :param in_port_num: string, the port number to add
        :param in_protocol: string, the protocol to add
        :return: int, the port_id of the newly added host
        """
        query = 'CALL pentestdb.insert_port_record(\'{0}\', \'{1}\');'.format(
            in_port_num,
            in_protocol
        )
        f = pd.read_sql_query(query, self.__mysql_engine)
        return f.port_id[0]

    def select_port_record(self, in_port_num, in_protocol):
        """

        :param in_port_num: string, the port number to search for
        :param in_protocol: string, the protocol to search for
        :return: pandas data frame with the result
        """
        query = 'CALL pentestdb.select_port_record(\'{0}\', \'{1}\');'.format(
            in_port_num,
            in_protocol
        )
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='port_id')
        return f

    def select_port_record_by_id(self, in_port_id):
        """
        Returns the port record with the matching port_id.

        :param in_port_id: int, the port_id for the port
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_port_record_by_id({0});'.format(in_port_id)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='port_id')
        return f

    def select_port_record_by_num(self, in_port_num):
        """
        Searches the port_num field in the port table and returns all results that match the search string.

        :param in_mac: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_port_record_by_num(\'{0}\');'.format(in_port_num)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='port_id')
        return f

    def select_port_record_by_protcol(self, in_protocol):
        """
        Searches the protocol field in the port table and returns all results that match the search string.
        Includes partial matches.

        :param in_protocol: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_port_record_by_protcol(\'{0}\');'.format(in_protocol)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='port_id')
        return f

    def insert_service_record(self, in_name, in_product, in_version):
        """
        Add a service record to the database

        :param in_name: string, the name to add
        :param in_product: string, the product to add
        :param in_version: string, the version to add
        :return: int, the service_id of the newly added host
        """
        query = 'CALL pentestdb.insert_service_record(\'{0}\', \'{1}\', \'{2}\');'.format(
            in_name,
            in_product,
            in_version
        )
        f = pd.read_sql_query(query, self.__mysql_engine)
        return f.service_id[0]

    def select_service_record_by_any_field(self, in_search_term):
        """
        Searches all fields in the service table and returns all results that match the search string in any field.
        Includes partial matches.

        :param in_search_term: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_service_record_by_any_field(\'{0}\');'.format(in_search_term)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='service_id')
        return f

    def select_service_record_by_name(self, in_name):
        """
        Searches the name field in the service table and returns all results that match the search string.
        Includes partial matches.

        :param in_name: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_port_record_by_protcol(\'{0}\');'.format(in_name)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='service_id')
        return f

    def select_service_record_by_product(self, in_product):
        """
        Searches the product field in the service table and returns all results that match the search string.
        Includes partial matches.

        :param in_product: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_service_record_by_product(\'{0}\');'.format(in_product)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='service_id')
        return f

    def select_service_record_by_version(self, in_version):
        """
        Searches the version field in the service table and returns all results that match the search string.
        Includes partial matches.

        :param in_version: string, the term to search for
        :return: pandas data frame containing the results
        """
        query = 'CALL pentestdb.select_service_record_by_version(\'{0}\');'.format(in_version)
        f = pd.read_sql_query(query, self.__mysql_engine, index_col='service_id')
        return f

